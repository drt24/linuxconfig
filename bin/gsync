#!/usr/bin/env python
"""
Synchronises all remotes in git.

for all repos on the command line:
    for all remotes:
        git pull
    for all remotes:
        git push

If no directories are given as arguments, synchronises the current directory.
"""
from __future__ import absolute_import, division, print_function, unicode_literals
from future_builtins import *  # ascii, filter, hex, map, oct, zip

import os
import sys
import subprocess


def printf(fmt=None, *args, **kwargs):
    if fmt:
        print(fmt.format(*args, **kwargs))
    else:
        print()


def visit_dirs(dirs, func):
    for dir in dirs:
        owd = os.getcwd()
        os.chdir(dir)
        func(dir)
        os.chdir(owd)

    
def check_git_clean(dir):
    try:
        assert os.path.exists('.git')
        assert os.path.isdir('.git')
        out = subprocess.check_output(['git', 'status'], stderr=subprocess.STDOUT)
        if 'nothing to commit' not in out:
            printf('{} has uncommited work. Commit or remove it before sync.', dir)
            sys.exit(-3)
    except AssertionError:
        printf('{} is not a git repository.', dir)
        sys.exit(-1)


def git_remotes():
    out = subprocess.check_output(['git', 'remote'])
    return list(map(unicode.strip, out.strip().split('\n')))


def git_pull(dir, remote):
    printf('{}: git pull {} master', dir, remote)
    out = subprocess.check_output(['git', 'pull', remote, 'master'], stderr=subprocess.STDOUT)
    if 'Already up-to-date.' not in out:
        print(out.strip())


def git_push(dir, remote):
    printf('{}: git push {} master', dir, remote)
    out = subprocess.check_output(['git', 'push', remote, 'master'], stderr=subprocess.STDOUT)
    if 'Everything up-to-date' not in out:
        print(out.strip())
    

def sync(dir):
    try:
        remotes = git_remotes()
        for remote in remotes:
            git_pull(dir, remote)
        for remote in remotes:
            git_push(dir, remote)
    except subprocess.CalledProcessError, e:
        print(e.output.strip(), file=sys.stderr)
        sys.exit(-2)
        

def main(dirs):
    visit_dirs(dirs, check_git_clean)
    visit_dirs(dirs, sync)
		

if __name__ == '__main__':
    if len(sys.argv) > 1:
        main(sys.argv[1:])
    else:
        main(['.'])
